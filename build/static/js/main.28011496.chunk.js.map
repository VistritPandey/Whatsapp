{"version":3,"sources":["firebase.js","StateProvider.js","Chat.js","reducer.js","Login.js","SidebarChat.js","Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Chat","useState","setSeed","input","setInput","roomId","useParams","roomName","setRoomName","messages","setMessages","user","useEffect","collection","doc","onSnapshot","snapshot","data","name","orderBy","docs","map","Math","floor","random","className","Avatar","src","Date","length","timestamp","toDate","toUTCString","IconButton","SearchOutlined","AttachFile","MoreVert","message","displayName","InsertEmoticon","type","placeholder","onChange","e","target","onClick","preventDefault","add","FieldValue","serverTimestamp","Mic","actionTypes","state","action","console","log","Login","dispatch","Button","signInWithPopup","then","result","catch","error","SidebarChat","addNewChat","id","prompt","to","Sidebar","rooms","setRooms","unsubscribe","photoURL","room","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.28011496.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyC78AYPs8Zt3pQipVeVYmjr1zclzKQ8-6s\",\r\n    authDomain: \"vistrit-whatsapp.firebaseapp.com\",\r\n    databaseURL: \"https://vistrit-whatsapp.firebaseio.com\",\r\n    projectId: \"vistrit-whatsapp\",\r\n    storageBucket: \"vistrit-whatsapp.appspot.com\",\r\n    messagingSenderId: \"712361611310\",\r\n    appId: \"1:712361611310:web:c5e8bafd32d1b1c0dd8fbf\",\r\n    measurementId: \"G-356D2RRKQN\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n  var provider = new firebase.auth.GoogleAuthProvider();\r\n  \r\n  export { auth, provider };\r\n  export default db;","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Chat.css\";\r\nimport {\r\n  AttachFile,\r\n  InsertEmoticon,\r\n  Mic,\r\n  MoreVert,\r\n  SearchOutlined,\r\n} from \"@material-ui/icons\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction Chat() {\r\n  const [seed, setSeed] = useState(\"\");\r\n  const [input, setInput] = useState(\"\");\r\n  const { roomId } = useParams();\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    if (roomId) {\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .onSnapshot((snapshot) => {\r\n          setRoomName(snapshot.data().name);\r\n        });\r\n\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n    // console.log(messages);\r\n    return () => {};\r\n  }, [roomId]);\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n      message: input,\r\n      name: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${roomId}.svg`} />\r\n        <div className=\"chat__headerInfo\">\r\n          <h3>{roomName}</h3>\r\n          <p>\r\n            Last seen at{\" \"}\r\n            {new Date(\r\n              messages[messages.length - 1]?.timestamp?.toDate()\r\n            ).toUTCString()}\r\n          </p>\r\n        </div>\r\n        <div className=\"chat__headerRight\">\r\n          <IconButton>\r\n            <SearchOutlined />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFile />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVert />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__body\">\r\n        {messages.map((message) => (\r\n          <p\r\n            className={`chat__message ${\r\n              message.name === user.displayName && \"chat__receiver\"\r\n            }`}\r\n          >\r\n            <span className=\"chat__name\">{message.name}</span>\r\n            {message.message}\r\n            <span className=\"chat__timestamp\">\r\n              {new Date(message.timestamp?.toDate()).toUTCString()}\r\n            </span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat__footer\">\r\n        <InsertEmoticon />\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type a message\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n          />\r\n          <button type=\"submit\" onClick={sendMessage}>\r\n            Type a message\r\n          </button>\r\n        </form>\r\n        <Mic />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","export const initialState = {\r\n    user: null,\r\n  };\r\n  \r\n  export const actionTypes = {\r\n    SET_USER: \"SET_USER\",\r\n  };\r\n  \r\n  const reducer = (state, action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n      case actionTypes.SET_USER:\r\n        return {\r\n          ...state,\r\n          user: action.user,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default reducer;\r\n  ","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport \"./Login.css\";\r\nimport { auth, provider } from \"./firebase\";\r\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { actionTypes } from \"./reducer\";\r\n\r\nfunction Login() {\r\n  const [{}, dispatch] = useStateValue();\r\n\r\n  const signIn = () => {\r\n    auth\r\n      .signInWithPopup(provider)\r\n      .then((result) => {\r\n        dispatch({\r\n          type: actionTypes.SET_USER,\r\n          user: result.user,\r\n        });\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <div className=\"login__text\">\r\n          <h1>WhatsApp-Clone</h1>\r\n        </div>\r\n\r\n        <Button onClick={signIn}>\r\n          <MailOutlineIcon className=\"mailIconLogin\" />\r\n          Sign In With Google\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","import { Avatar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport db from \"./firebase\";\r\nimport \"./SidebarChat.css\";\r\n\r\nfunction SidebarChat({ addNewChat, id, name }) {\r\n  const [seed, setSeed] = useState(\"\");\r\n  const [messages, setMessages] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      db.collection(\"rooms\")\r\n        .doc(id)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n        setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n    console.log(messages);\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  const createChat = () => {\r\n    const roomName = prompt(\"Please enter name for chat room\");\r\n    if (roomName) {\r\n      db.collection(\"rooms\").add({\r\n        name: roomName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return !addNewChat ? (\r\n    <Link to={`/rooms/${id}`}>\r\n      <div className=\"sidebarChat\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${id}.svg`} />\r\n        <div className=\"sidebarChat__info\">\r\n          <h2>{name}</h2>\r\n          <p>{messages[0]?.message}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  ) : (\r\n    <div className=\"sidebarChat\" onClick={createChat}>\r\n      <h2>Add new Chat</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarChat;","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport { SearchOutlined } from \"@material-ui/icons\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport db from \"./firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction Sidebar() {\r\n  const [rooms, setRooms] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = db.collection(\"rooms\").onSnapshot((snapshot) =>\r\n      setRooms(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n\r\n    return()=>{\r\n      unsubscribe();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <Avatar src={user?.photoURL}/>\r\n        <div className=\"sidebar__headerRight\">\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar__searchContainer\">\r\n          <SearchOutlined />\r\n          <input placeholder=\"Search or start new chat\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__chats\">\r\n        <SidebarChat addNewChat />\r\n        {rooms.map((room) => (\r\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Chat from \"./Chat\";\r\nimport Login from \"./Login\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction App() {\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  return (\r\n    // BEM naming convention\r\n    <div className=\"app\">\r\n      {!user ? (\r\n        <Login />\r\n      ) : (\r\n        <div className=\"app__body\">\r\n          <BrowserRouter>\r\n            <Sidebar />\r\n            <Switch>\r\n              <Route path=\"/rooms/:roomId\">\r\n                <Chat />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <div className=\"app__body-emptyChat\">\r\n                </div>\r\n              </Route>\r\n            </Switch>\r\n          </BrowserRouter>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { StateProvider } from \"./StateProvider\";\r\nimport reducer, { initialState } from \"./reducer\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider initialState={initialState} reducer={reducer}>\r\n      <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}